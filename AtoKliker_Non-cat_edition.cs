using Newtonsoft.Json;using System.Runtime.InteropServices;namespace A{class B{[DllImport("user32.dll",SetLastError=true)] private static extern void m(uint dwFlags,uint dx,uint dy,uint dwData,int dwExtraInfo);[DllImport("user32.dll",SetLastError=true)]private static extern short g(int vKey);private static string st="ER";private static void CW()=>Console.WriteLine($"{st}");private const uint prd=0x02,pru=0x04,scd=0x08,scu=0x10;private const int tb=5,hb=6,pr=1,sc=2;private static int d=1,nd=1,md=1,kt=pr,ch=hb,ct=tb;private static bool it,wt=false;private static void S(){st=File.Exists("S.json")?"S":"MS";CW();S jf=new(){HB=ch,TB=ct,CT=kt,D=d,ND=nd,MD=md};File.WriteAllText("S.json",JsonConvert.SerializeObject(jf,Formatting.Indented));}private static void L(){if(File.Exists("S.json")){string j=File.ReadAllText("S.json");var jf=JsonConvert.DeserializeObject<S>(j);if(jf!=null){ch=jf.HB;ct=jf.TB;kt=jf.CT;d=jf.D;nd=jf.ND;md=jf.MD;st="L";CW();}}}private static void H(){st="\nCmds:\nLT(num/PD)\nLH(num/PD)\nLPC\nLSC\nLD(Min,Max)\nLR\nLC(Input)\nH\nC\nLS\nLL\ndiscord.gg/FwmGf6vBu2\n";CW();} private static void C(){st=$"\nH:{ch}\nT:{ct}\nKT:{kt}\nD:{d}\nND:{nd}\nMD:{md}\n";CW();}private static void K(){m(kt==pr?prd:scd,0,0,0,0);m(kt==pr?pru:scu,0,0,0,0);}private static bool I(int k)=>(g(k)&0x8000)!=0;private static readonly Dictionary<string,uint>u=new(){{"F1",0x70},{"F2",0x71},{"F3",0x72},{"F4",0x73},{"F5",0x74},{"F6",0x75},{"F7",0x76},{"F8",0x77},{"F9",0x78},{"F10",0x79},{"F11",0x7A},{"F12",0x7B},{"F13",0x7C},{"F14",0x7D},{"F15",0x7E},{"F16",0x7F},{"F17",0x80},{"F18",0x81},{"F19",0x82},{"F20",0x83},{"F21",0x84},{"F22",0x85},{"F23",0x86},{"F24",0x87},{"Mouse1",0x01},{"Mouse2",0x02},{"Mouse3",0x04},{"Mouse4",0x05},{"Mouse5",0x06}};private static uint PD(string b)=>u.TryGetValue(b,out uint c)?c:uint.MaxValue;private static void LPC(){kt=pr;st="L";}private static void LSC(){kt=sc;st="L";}private static void LC(string ki){if(ki.Length==1){int vkc=char.ToUpper(ki[0]);st=$"{ki}={vkc}";CW();}}private static void LH(int b){ch=b;string h=BC(b);st=$"set{b}/{h}";CW();}private static string BC(int b)=>u.FirstOrDefault(x=>x.Value==(uint)b).Key??((char)b).ToString();private static void LT(int b){ct=b;string h=BC(b);st=$"set{b}/{h}";CW();}private static void LD(int nD,int mD=-1){if(md==-1){d=nD;nd=nD;md=nD;st=$"set{d}";CW();}else{nd=nD;md=mD;AC();}}private static void LR(){ch=hb;ct=tb;kt=pr;it=false;st="done";CW();}private static void CR(string i){string[]p=i.Split('(');if(i.Equals("LS",StringComparison.OrdinalIgnoreCase)){S();return;}if(i.Equals("LL",StringComparison.OrdinalIgnoreCase)){L();return;}if(i.Equals("H",StringComparison.OrdinalIgnoreCase)){H();return;}if(i.Equals("C",StringComparison.OrdinalIgnoreCase)){C();return;}if(p.Length==2){string c=p[0].Trim();string bs=p[1].Trim(')');if(c.Equals("LD",StringComparison.OrdinalIgnoreCase)){string[]dp=bs.Split(',');if(dp.Length==1&&int.TryParse(dp[0],out int d)){LD(d);}else if(dp.Length==2&&int.TryParse(dp[0],out int nD)&&int.TryParse(dp[1], out int mD)){LD(nD,mD);}return;}if(int.TryParse(bs, out int bc)){switch(c){case"LT":LT(bc);break;case"LH":LH(bc);break;}}else{uint pD=PD(bs);if(pD!=uint.MaxValue){switch(c){case"LT":LT((int)pD);break;case"LH":LH((int)pD);break;}}}}else{SC(i);}}private static void T(){bool iP=I(ct);if(iP&&!wt){it=!it;Thread.Sleep(200);}wt=iP;}private static void SC(string i){if(i=="LPC")LPC();else if(i=="LSC")LSC();else if(i=="LR")LR();}private static void AC(){if(md>nd){d=new Random().Next(nd,md+1);}else{d=nd;}}static void Main(){Console.WindowHeight=30;Console.WindowWidth=170;if(File.Exists("S.json"))L();else S();Console.Title="Low File Size Version";st="type H";CW();while(true){if(Console.KeyAvailable){string?i=Console.ReadLine();if(i!=null){if(i.StartsWith("LC("))LC(i[7..^1]);else CR(i);}}T();if(I(ch)){K();AC();Thread.Sleep(d);}if(it){K();AC();Thread.Sleep(d);}}}}}